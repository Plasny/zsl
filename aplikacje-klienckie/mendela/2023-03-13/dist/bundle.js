/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/animations/lensAnimation.ts":
/*!*****************************************!*\
  !*** ./src/animations/lensAnimation.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ lensAnimation)\n/* harmony export */ });\nvar unit = 16;\nvar colors = [\"blue\", \"red\", \"yellow\"];\n/**\n * Function which returns animation for lens\n * @returns object with animation instructions\n */\nfunction lensAnimation() {\n    colors.unshift(colors.pop());\n    return [\n        {\n            spriteName: \"microbe_\".concat(colors[0], \"_big\"),\n            pos: {\n                x: 5 * unit,\n                y: 19 * unit,\n            },\n        },\n        {\n            spriteName: \"microbe_\".concat(colors[1], \"_big\"),\n            pos: {\n                x: 7 * unit,\n                y: 15 * unit,\n            },\n        },\n        {\n            spriteName: \"microbe_\".concat(colors[2], \"_big\"),\n            pos: {\n                x: 3 * unit,\n                y: 15 * unit,\n            },\n        },\n    ];\n}\n\n\n//# sourceURL=webpack://dr-mario/./src/animations/lensAnimation.ts?");

/***/ }),

/***/ "./src/animations/throwAnimation.ts":
/*!******************************************!*\
  !*** ./src/animations/throwAnimation.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ throwAnimation)\n/* harmony export */ });\nvar unit = 16;\nvar marginLeft = 304; //0\n// 1-top, 2-down, 3-left, 4-right\n/**\n * Function which returns animation for doctor and pill\n * @returns object with animation instructions\n */\nfunction throwAnimation(colors) {\n    return [\n        [\n            {\n                spriteName: \"pill_\".concat(colors[0], \"_3\"),\n                pos: {\n                    x: 11 * unit + marginLeft,\n                    y: 3 * unit,\n                },\n            },\n            {\n                spriteName: \"pill_\".concat(colors[1], \"_4\"),\n                pos: {\n                    x: 12 * unit + marginLeft,\n                    y: 3 * unit,\n                },\n            },\n            {\n                spriteName: \"hand_up_p1\",\n                pos: {\n                    x: 496,\n                    y: 64,\n                },\n            },\n            {\n                spriteName: \"hand_up_p2\",\n                pos: {\n                    x: 496,\n                    y: 80,\n                },\n            },\n            {\n                spriteName: \"hand_up_p3\",\n                pos: {\n                    x: 496,\n                    y: 96,\n                },\n            },\n        ],\n        [\n            {\n                spriteName: \"pill_\".concat(colors[0], \"_2\"),\n                pos: {\n                    x: 11 * unit + marginLeft,\n                    y: 3 * unit,\n                },\n            },\n            {\n                spriteName: \"pill_\".concat(colors[1], \"_1\"),\n                pos: {\n                    x: 11 * unit + marginLeft,\n                    y: 2 * unit,\n                },\n            },\n            {\n                spriteName: \"hand_up_p1\",\n                pos: {\n                    x: 496,\n                    y: 64,\n                },\n            },\n            {\n                spriteName: \"hand_up_p2\",\n                pos: {\n                    x: 496,\n                    y: 80,\n                },\n            },\n            {\n                spriteName: \"hand_up_p3\",\n                pos: {\n                    x: 496,\n                    y: 96,\n                },\n            },\n        ],\n        [\n            {\n                spriteName: \"pill_\".concat(colors[0], \"_4\"),\n                pos: {\n                    x: 11 * unit + marginLeft,\n                    y: 2 * unit,\n                },\n            },\n            {\n                spriteName: \"pill_\".concat(colors[1], \"_3\"),\n                pos: {\n                    x: 10 * unit + marginLeft,\n                    y: 2 * unit,\n                },\n            },\n            {\n                spriteName: \"hand_up_p1\",\n                pos: {\n                    x: 496,\n                    y: 64,\n                },\n            },\n            {\n                spriteName: \"hand_up_p2\",\n                pos: {\n                    x: 496,\n                    y: 80,\n                },\n            },\n            {\n                spriteName: \"hand_up_p3\",\n                pos: {\n                    x: 496,\n                    y: 96,\n                },\n            },\n        ],\n        [\n            {\n                spriteName: \"pill_\".concat(colors[1], \"_2\"),\n                pos: {\n                    x: 10 * unit + marginLeft,\n                    y: 2 * unit,\n                },\n            },\n            {\n                spriteName: \"pill_\".concat(colors[0], \"_1\"),\n                pos: {\n                    x: 10 * unit + marginLeft,\n                    y: 1 * unit,\n                },\n            },\n            {\n                spriteName: \"hand_up_p1\",\n                pos: {\n                    x: 496,\n                    y: 64,\n                },\n            },\n            {\n                spriteName: \"hand_up_p2\",\n                pos: {\n                    x: 496,\n                    y: 80,\n                },\n            },\n            {\n                spriteName: \"hand_up_p3\",\n                pos: {\n                    x: 496,\n                    y: 96,\n                },\n            },\n        ],\n        [\n            {\n                spriteName: \"pill_\".concat(colors[1], \"_4\"),\n                pos: {\n                    x: 10 * unit + marginLeft,\n                    y: 1 * unit,\n                },\n            },\n            {\n                spriteName: \"pill_\".concat(colors[0], \"_3\"),\n                pos: {\n                    x: 9 * unit + marginLeft,\n                    y: 1 * unit,\n                },\n            },\n            {\n                spriteName: \"hand_middle_p1\",\n                pos: {\n                    x: 480,\n                    y: 80,\n                },\n            },\n            {\n                spriteName: \"hand_middle_p2\",\n                pos: {\n                    x: 496,\n                    y: 80,\n                },\n            },\n            {\n                spriteName: \"hand_middle_p3\",\n                pos: {\n                    x: 480,\n                    y: 96,\n                },\n            },\n            {\n                spriteName: \"hand_middle_p4\",\n                pos: {\n                    x: 496,\n                    y: 96,\n                },\n            },\n        ],\n        [\n            {\n                spriteName: \"pill_\".concat(colors[0], \"_2\"),\n                pos: {\n                    x: 9 * unit + marginLeft,\n                    y: 1 * unit,\n                },\n            },\n            {\n                spriteName: \"pill_\".concat(colors[1], \"_1\"),\n                pos: {\n                    x: 9 * unit + marginLeft,\n                    y: 0 * unit,\n                },\n            },\n            {\n                spriteName: \"hand_middle_p1\",\n                pos: {\n                    x: 480,\n                    y: 80,\n                },\n            },\n            {\n                spriteName: \"hand_middle_p2\",\n                pos: {\n                    x: 496,\n                    y: 80,\n                },\n            },\n            {\n                spriteName: \"hand_middle_p3\",\n                pos: {\n                    x: 480,\n                    y: 96,\n                },\n            },\n            {\n                spriteName: \"hand_middle_p4\",\n                pos: {\n                    x: 496,\n                    y: 96,\n                },\n            },\n        ],\n        [\n            {\n                spriteName: \"pill_\".concat(colors[0], \"_4\"),\n                pos: {\n                    x: 9 * unit + marginLeft,\n                    y: 1 * unit,\n                },\n            },\n            {\n                spriteName: \"pill_\".concat(colors[1], \"_3\"),\n                pos: {\n                    x: 8 * unit + marginLeft,\n                    y: 1 * unit,\n                },\n            },\n            {\n                spriteName: \"hand_middle_p1\",\n                pos: {\n                    x: 480,\n                    y: 80,\n                },\n            },\n            {\n                spriteName: \"hand_middle_p2\",\n                pos: {\n                    x: 496,\n                    y: 80,\n                },\n            },\n            {\n                spriteName: \"hand_middle_p3\",\n                pos: {\n                    x: 480,\n                    y: 96,\n                },\n            },\n            {\n                spriteName: \"hand_middle_p4\",\n                pos: {\n                    x: 496,\n                    y: 96,\n                },\n            },\n        ],\n        [\n            {\n                spriteName: \"pill_\".concat(colors[1], \"_2\"),\n                pos: {\n                    x: 8 * unit + marginLeft,\n                    y: 1 * unit,\n                },\n            },\n            {\n                spriteName: \"pill_\".concat(colors[0], \"_1\"),\n                pos: {\n                    x: 8 * unit + marginLeft,\n                    y: 0 * unit,\n                },\n            },\n            {\n                spriteName: \"hand_down_p1\",\n                pos: {\n                    x: 496,\n                    y: 96,\n                },\n            },\n            {\n                spriteName: \"hand_down_p2\",\n                pos: {\n                    x: 496,\n                    y: 112,\n                },\n            },\n        ],\n        [\n            {\n                spriteName: \"pill_\".concat(colors[1], \"_4\"),\n                pos: {\n                    x: 8 * unit + marginLeft,\n                    y: 1 * unit,\n                },\n            },\n            {\n                spriteName: \"pill_\".concat(colors[0], \"_3\"),\n                pos: {\n                    x: 7 * unit + marginLeft,\n                    y: 1 * unit,\n                },\n            },\n            {\n                spriteName: \"hand_down_p1\",\n                pos: {\n                    x: 496,\n                    y: 96,\n                },\n            },\n            {\n                spriteName: \"hand_down_p2\",\n                pos: {\n                    x: 496,\n                    y: 112,\n                },\n            },\n        ],\n        [\n            {\n                spriteName: \"pill_\".concat(colors[0], \"_2\"),\n                pos: {\n                    x: 7 * unit + marginLeft,\n                    y: 1 * unit,\n                },\n            },\n            {\n                spriteName: \"pill_\".concat(colors[1], \"_1\"),\n                pos: {\n                    x: 7 * unit + marginLeft,\n                    y: 0 * unit,\n                },\n            },\n            {\n                spriteName: \"hand_down_p1\",\n                pos: {\n                    x: 496,\n                    y: 96,\n                },\n            },\n            {\n                spriteName: \"hand_down_p2\",\n                pos: {\n                    x: 496,\n                    y: 112,\n                },\n            },\n        ],\n        [\n            {\n                spriteName: \"pill_\".concat(colors[0], \"_4\"),\n                pos: {\n                    x: 7 * unit + marginLeft,\n                    y: 1 * unit,\n                },\n            },\n            {\n                spriteName: \"pill_\".concat(colors[1], \"_3\"),\n                pos: {\n                    x: 6 * unit + marginLeft,\n                    y: 1 * unit,\n                },\n            },\n            {\n                spriteName: \"hand_down_p1\",\n                pos: {\n                    x: 496,\n                    y: 96,\n                },\n            },\n            {\n                spriteName: \"hand_down_p2\",\n                pos: {\n                    x: 496,\n                    y: 112,\n                },\n            },\n        ],\n        [\n            {\n                spriteName: \"pill_\".concat(colors[1], \"_2\"),\n                pos: {\n                    x: 6 * unit + marginLeft,\n                    y: 1 * unit,\n                },\n            },\n            {\n                spriteName: \"pill_\".concat(colors[0], \"_1\"),\n                pos: {\n                    x: 6 * unit + marginLeft,\n                    y: 0 * unit,\n                },\n            },\n            {\n                spriteName: \"hand_down_p1\",\n                pos: {\n                    x: 496,\n                    y: 96,\n                },\n            },\n            {\n                spriteName: \"hand_down_p2\",\n                pos: {\n                    x: 496,\n                    y: 112,\n                },\n            },\n        ],\n        [\n            {\n                spriteName: \"pill_\".concat(colors[1], \"_4\"),\n                pos: {\n                    x: 6 * unit + marginLeft,\n                    y: 1 * unit,\n                },\n            },\n            {\n                spriteName: \"pill_\".concat(colors[0], \"_3\"),\n                pos: {\n                    x: 5 * unit + marginLeft,\n                    y: 1 * unit,\n                },\n            },\n            {\n                spriteName: \"hand_down_p1\",\n                pos: {\n                    x: 496,\n                    y: 96,\n                },\n            },\n            {\n                spriteName: \"hand_down_p2\",\n                pos: {\n                    x: 496,\n                    y: 112,\n                },\n            },\n        ],\n        [\n            {\n                spriteName: \"pill_\".concat(colors[0], \"_2\"),\n                pos: {\n                    x: 5 * unit + marginLeft,\n                    y: 1 * unit,\n                },\n            },\n            {\n                spriteName: \"pill_\".concat(colors[1], \"_1\"),\n                pos: {\n                    x: 5 * unit + marginLeft,\n                    y: 0 * unit,\n                },\n            },\n            {\n                spriteName: \"hand_down_p1\",\n                pos: {\n                    x: 496,\n                    y: 96,\n                },\n            },\n            {\n                spriteName: \"hand_down_p2\",\n                pos: {\n                    x: 496,\n                    y: 112,\n                },\n            },\n        ],\n        [\n            {\n                spriteName: \"pill_\".concat(colors[0], \"_4\"),\n                pos: {\n                    x: 5 * unit + marginLeft,\n                    y: 1 * unit,\n                },\n            },\n            {\n                spriteName: \"pill_\".concat(colors[1], \"_3\"),\n                pos: {\n                    x: 4 * unit + marginLeft,\n                    y: 1 * unit,\n                },\n            },\n            {\n                spriteName: \"hand_down_p1\",\n                pos: {\n                    x: 496,\n                    y: 96,\n                },\n            },\n            {\n                spriteName: \"hand_down_p2\",\n                pos: {\n                    x: 496,\n                    y: 112,\n                },\n            },\n        ],\n        [\n            {\n                spriteName: \"pill_\".concat(colors[1], \"_2\"),\n                pos: {\n                    x: 4 * unit + marginLeft,\n                    y: 1 * unit,\n                },\n            },\n            {\n                spriteName: \"pill_\".concat(colors[0], \"_1\"),\n                pos: {\n                    x: 4 * unit + marginLeft,\n                    y: 0 * unit,\n                },\n            },\n            {\n                spriteName: \"hand_down_p1\",\n                pos: {\n                    x: 496,\n                    y: 96,\n                },\n            },\n            {\n                spriteName: \"hand_down_p2\",\n                pos: {\n                    x: 496,\n                    y: 112,\n                },\n            },\n        ],\n        [\n            {\n                spriteName: \"pill_\".concat(colors[1], \"_4\"),\n                pos: {\n                    x: 4 * unit + marginLeft,\n                    y: 1 * unit,\n                },\n            },\n            {\n                spriteName: \"pill_\".concat(colors[0], \"_3\"),\n                pos: {\n                    x: 3 * unit + marginLeft,\n                    y: 1 * unit,\n                },\n            },\n            {\n                spriteName: \"hand_down_p1\",\n                pos: {\n                    x: 496,\n                    y: 96,\n                },\n            },\n            {\n                spriteName: \"hand_down_p2\",\n                pos: {\n                    x: 496,\n                    y: 112,\n                },\n            },\n        ],\n        [\n            {\n                spriteName: \"pill_\".concat(colors[0], \"_2\"),\n                pos: {\n                    x: 3 * unit + marginLeft,\n                    y: 1 * unit,\n                },\n            },\n            {\n                spriteName: \"pill_\".concat(colors[1], \"_1\"),\n                pos: {\n                    x: 3 * unit + marginLeft,\n                    y: 0 * unit,\n                },\n            },\n            {\n                spriteName: \"hand_down_p1\",\n                pos: {\n                    x: 496,\n                    y: 96,\n                },\n            },\n            {\n                spriteName: \"hand_down_p2\",\n                pos: {\n                    x: 496,\n                    y: 112,\n                },\n            },\n        ],\n        [\n            {\n                spriteName: \"pill_\".concat(colors[0], \"_4\"),\n                pos: {\n                    x: 3 * unit + marginLeft,\n                    y: 2 * unit,\n                },\n            },\n            {\n                spriteName: \"pill_\".concat(colors[1], \"_3\"),\n                pos: {\n                    x: 2 * unit + marginLeft,\n                    y: 2 * unit,\n                },\n            },\n            {\n                spriteName: \"hand_down_p1\",\n                pos: {\n                    x: 496,\n                    y: 96,\n                },\n            },\n            {\n                spriteName: \"hand_down_p2\",\n                pos: {\n                    x: 496,\n                    y: 112,\n                },\n            },\n        ],\n        [\n            {\n                spriteName: \"pill_\".concat(colors[1], \"_2\"),\n                pos: {\n                    x: 2 * unit + marginLeft,\n                    y: 3 * unit,\n                },\n            },\n            {\n                spriteName: \"pill_\".concat(colors[0], \"_1\"),\n                pos: {\n                    x: 2 * unit + marginLeft,\n                    y: 2 * unit,\n                },\n            },\n            {\n                spriteName: \"hand_down_p1\",\n                pos: {\n                    x: 496,\n                    y: 96,\n                },\n            },\n            {\n                spriteName: \"hand_down_p2\",\n                pos: {\n                    x: 496,\n                    y: 112,\n                },\n            },\n        ],\n        [\n            {\n                spriteName: \"pill_\".concat(colors[1], \"_4\"),\n                pos: {\n                    x: 2 * unit + marginLeft,\n                    y: 3 * unit,\n                },\n            },\n            {\n                spriteName: \"pill_\".concat(colors[0], \"_3\"),\n                pos: {\n                    x: 1 * unit + marginLeft,\n                    y: 3 * unit,\n                },\n            },\n            {\n                spriteName: \"hand_down_p1\",\n                pos: {\n                    x: 496,\n                    y: 96,\n                },\n            },\n            {\n                spriteName: \"hand_down_p2\",\n                pos: {\n                    x: 496,\n                    y: 112,\n                },\n            },\n        ],\n        [\n            {\n                spriteName: \"pill_\".concat(colors[1], \"_4\"),\n                pos: {\n                    x: 2 * unit + marginLeft,\n                    y: 4 * unit,\n                },\n            },\n            {\n                spriteName: \"pill_\".concat(colors[0], \"_3\"),\n                pos: {\n                    x: 1 * unit + marginLeft,\n                    y: 4 * unit,\n                },\n            },\n            {\n                spriteName: \"hand_down_p1\",\n                pos: {\n                    x: 496,\n                    y: 96,\n                },\n            },\n            {\n                spriteName: \"hand_down_p2\",\n                pos: {\n                    x: 496,\n                    y: 112,\n                },\n            },\n        ],\n        [\n            {\n                spriteName: \"pill_\".concat(colors[1], \"_4\"),\n                pos: {\n                    x: 2 * unit + marginLeft,\n                    y: 5 * unit,\n                },\n            },\n            {\n                spriteName: \"pill_\".concat(colors[0], \"_3\"),\n                pos: {\n                    x: 1 * unit + marginLeft,\n                    y: 5 * unit,\n                },\n            },\n            {\n                spriteName: \"hand_down_p1\",\n                pos: {\n                    x: 496,\n                    y: 96,\n                },\n            },\n            {\n                spriteName: \"hand_down_p2\",\n                pos: {\n                    x: 496,\n                    y: 112,\n                },\n            },\n        ],\n        [\n            {\n                spriteName: \"pill_\".concat(colors[1], \"_4\"),\n                pos: {\n                    x: 2 * unit + marginLeft,\n                    y: 6 * unit,\n                },\n            },\n            {\n                spriteName: \"pill_\".concat(colors[0], \"_3\"),\n                pos: {\n                    x: 1 * unit + marginLeft,\n                    y: 6 * unit,\n                },\n            },\n            {\n                spriteName: \"hand_down_p1\",\n                pos: {\n                    x: 496,\n                    y: 96,\n                },\n            },\n            {\n                spriteName: \"hand_down_p2\",\n                pos: {\n                    x: 496,\n                    y: 112,\n                },\n            },\n        ],\n    ];\n}\n\n\n//# sourceURL=webpack://dr-mario/./src/animations/throwAnimation.ts?");

/***/ }),

/***/ "./src/game.ts":
/*!*********************!*\
  !*** ./src/game.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Game\": () => (/* binding */ Game)\n/* harmony export */ });\n/* harmony import */ var _input__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./input */ \"./src/input.ts\");\n/* harmony import */ var _ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ui */ \"./src/ui.ts\");\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./types */ \"./src/types.ts\");\n/* harmony import */ var _storage__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./storage */ \"./src/storage.ts\");\n/**\n * Module with games logic\n * @module game\n *\n * to fix:\n *   - zbijanie na krzyz\n *   - odbijanie kiedy przybije do prawej strony\n */\nvar __spreadArray = (undefined && undefined.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\n\n// import { Board } from \"./old-ui\";\n\n\n\n/**\n * Class where everything happens\n *\n * @example\n * To use it use to following code\n * ```ts\n * import { Game } from \"./game\";\n * import { startListening } from \"./input\";\n *\n * startListening()\n * new Game()\n * ```\n */\nvar Game = /** @class */ (function () {\n    /**\n     * Constructor of the Game class\n     * @param width width of the gameboard\n     * @param height height of the gameboard\n     * @param microbes number of microbes to clear stage\n     * @param tickLength speed of the game (higher number => higher speed of game)\n     */\n    function Game(width, height, microbes, tickLength) {\n        if (width === void 0) { width = 8; }\n        if (height === void 0) { height = 16; }\n        if (microbes === void 0) { microbes = 4; }\n        if (tickLength === void 0) { tickLength = 10; }\n        var _this = this;\n        this.types = [\"red\", \"blue\", \"yellow\"];\n        this.tick = 0;\n        this.score = 0;\n        this.pillNr = 0;\n        this.bestScore = (0,_storage__WEBPACK_IMPORTED_MODULE_3__.getBestScore)();\n        this.noGame = false;\n        this.nextColors = [\"red\", \"yellow\"];\n        this.width = width;\n        this.height = height;\n        this.microbesNr = microbes;\n        this.tickLength = tickLength;\n        this.table = new Array();\n        for (var i = 0; i < this.height; i++) {\n            this.table.push(new Array(width).fill({ cellType: \"none\" }));\n        }\n        this.lastFrame = Date.now();\n        this.pillPosition = [];\n        this.ui = new _ui__WEBPACK_IMPORTED_MODULE_1__.Board(width, height);\n        this.ui.setScore(this.score);\n        this.ui.setTopScore(this.bestScore);\n        this.ui.preparePill(this.nextColors);\n        this.ui.drawBoard(this.table);\n        this.randomMicrobes(this.microbesNr);\n        this.preparePill();\n        this.Render = function () {\n            _this.animationFrame = requestAnimationFrame(_this.Render);\n            if (_this.ui.ok === false)\n                return;\n            if (_this.lastFrame + 1000 / _this.tickLength >= Date.now())\n                return;\n            _this.lastFrame = Date.now();\n            _this.tick++;\n            _this.checkForMaches();\n            _this.dropAll();\n            _this.ui.drawBoard(_this.table);\n            _this.checkEndTheGame();\n            if (_this.noGame) {\n                var ok = _this.ui.animateThrow();\n                if (ok)\n                    _this.spawnPill(_this.nextColors);\n                else\n                    return;\n            }\n            if (_this.tick % 10 == 0 ||\n                _input__WEBPACK_IMPORTED_MODULE_0__.keysPressed.get(\"ArrowDown\") ||\n                _input__WEBPACK_IMPORTED_MODULE_0__.keysPressed.get(\"s\"))\n                _this.dropPill();\n            _this.movePill();\n        };\n        this.Render(0);\n    }\n    /**\n     * Method which return empty cell\n     * @returns empty cell\n     */\n    Game.prototype.emptyCell = function () {\n        return { cellType: \"none\" };\n    };\n    /**\n     * Method which places microbes in random cells of the board\n     */\n    Game.prototype.randomMicrobes = function (n) {\n        var types = [\"red\", \"blue\", \"yellow\"];\n        l1: for (var i = 0; i < n; i++) {\n            var x = Math.floor(Math.random() * this.width);\n            var y = Math.floor((Math.random() * this.height * 2) / 3 + this.height / 3);\n            var type = Math.floor(Math.random() * types.length);\n            // temporary fix for bug in checkForMaches method\n            for (var j = 0; j < this.width; j++) {\n                if (this.table[y][j].cellType === \"microbe\") {\n                    i--;\n                    continue l1;\n                }\n            }\n            for (var j = 0; j < this.height; j++) {\n                if (this.table[j][x].cellType === \"microbe\") {\n                    i--;\n                    continue l1;\n                }\n            }\n            // if(this.table[y][x].cellType === \"microbe\") {\n            //   i--;\n            //   continue;\n            // }\n            this.table[y][x] = {\n                cellType: \"microbe\",\n                color: types[type],\n            };\n            console.info(\"\".concat(types[type], \" microbe on \").concat(x, \":\").concat(y));\n        }\n    };\n    /**\n     * Method which is used for starting the pill throwing animation\n     */\n    Game.prototype.preparePill = function () {\n        // remove all moving pills before creating new ones\n        for (var y = 0; y < this.height; y++) {\n            for (var x = 0; x < this.width; x++) {\n                if (this.table[y][x].cellType === \"movingPill\")\n                    this.table[y][x].cellType = \"pill\";\n            }\n        }\n        if (this.pillPosition &&\n            this.lastPillPosition &&\n            this.lastPillPosition[0].y === this.pillPosition[0].y &&\n            this.lastPillPosition[0].x === this.pillPosition[0].x) {\n            cancelAnimationFrame(this.animationFrame);\n            this.ui.gameOver();\n        }\n        this.noGame = true;\n    };\n    /**\n     * Method which is used for spawning a new pill on the board\n     * @param colors\n     */\n    Game.prototype.spawnPill = function (colors) {\n        this.pillPosition = [];\n        this.pillPosition.push({ y: 0, x: 3 });\n        this.pillPosition.push({ y: 0, x: 4 });\n        var number = ++this.pillNr;\n        this.table[0][3] = {\n            cellType: \"movingPill\",\n            color: colors[0],\n            nr: number,\n            side: _types__WEBPACK_IMPORTED_MODULE_2__.Side.Left,\n        };\n        this.table[0][4] = {\n            cellType: \"movingPill\",\n            color: colors[1],\n            nr: number,\n            side: _types__WEBPACK_IMPORTED_MODULE_2__.Side.Right,\n        };\n        var types = __spreadArray([], this.types, true);\n        var type;\n        for (var i = 0; i < 2; i++) {\n            // color = types.splice(type, 1).toString() as Cell[\"color\"];\n            type = Math.floor(Math.random() * types.length);\n            this.nextColors[i] = types[type];\n        }\n        this.noGame = false;\n        this.ui.preparePill(this.nextColors);\n    };\n    /**\n     * Method which drops the moving pill one position\n     */\n    Game.prototype.dropPill = function () {\n        var moves = [];\n        if (!this.pillPosition)\n            return;\n        for (var i = 0; i < this.pillPosition.length; i++) {\n            var pillCellPos = this.pillPosition[i];\n            var y = pillCellPos.y;\n            var x = pillCellPos.x;\n            if (y >= this.height - 1) {\n                this.preparePill();\n                return;\n            }\n            if (![\"none\", \"movingPill\"].includes(this.table[y + 1][x].cellType)) {\n                this.preparePill();\n                return;\n            }\n            moves.push({\n                old: { x: x, y: y },\n                new: { x: x, y: y + 1 },\n                cell: this.table[y][x],\n            });\n        }\n        this.lastPillPosition = __spreadArray([], this.pillPosition, true);\n        this.pillPosition.splice(0, this.pillPosition.length);\n        for (var _i = 0, moves_1 = moves; _i < moves_1.length; _i++) {\n            var move = moves_1[_i];\n            this.table[move.old.y][move.old.x] = this.emptyCell();\n        }\n        for (var _a = 0, moves_2 = moves; _a < moves_2.length; _a++) {\n            var move = moves_2[_a];\n            this.table[move.new.y][move.new.x] = move.cell;\n            this.pillPosition.push({ x: move.new.x, y: move.new.y });\n        }\n    };\n    /**\n     * Method which drops all pill parts\n     */\n    Game.prototype.dropAll = function () {\n        var moves = [];\n        for (var y = this.height - 1; y >= 0; y--) {\n            for (var x = 0; x < this.width; x++) {\n                var cell = this.table[y][x];\n                if (cell.cellType !== \"pill\")\n                    continue;\n                if (y + 1 < this.height && this.table[y + 1][x].cellType === \"none\") {\n                    if (x + 1 < this.width) {\n                        if (this.table[y][x + 1].nr === cell.nr) {\n                            if (this.table[y + 1][x + 1].cellType === \"none\") {\n                                moves.push({\n                                    old: { x: x, y: y },\n                                    new: { x: x, y: y + 1 },\n                                    cell: this.table[y][x],\n                                });\n                                moves.push({\n                                    old: { x: x + 1, y: y },\n                                    new: { x: x + 1, y: y + 1 },\n                                    cell: this.table[y][x + 1],\n                                });\n                            }\n                            x++;\n                        }\n                        else if ((x === 0 && this.table[y][x + 1].nr != cell.nr) ||\n                            (x - 1 >= 0 && this.table[y][x - 1].nr != cell.nr)) {\n                            moves.push({\n                                old: { x: x, y: y },\n                                new: { x: x, y: y + 1 },\n                                cell: this.table[y][x],\n                            });\n                        }\n                    }\n                    else if (x === this.width - 1 &&\n                        this.table[y][x - 1].nr != cell.nr) {\n                        moves.push({\n                            old: { x: x, y: y },\n                            new: { x: x, y: y + 1 },\n                            cell: this.table[y][x],\n                        });\n                    }\n                }\n            }\n        }\n        for (var _i = 0, moves_3 = moves; _i < moves_3.length; _i++) {\n            var move = moves_3[_i];\n            this.table[move.old.y][move.old.x] = this.emptyCell();\n        }\n        for (var _a = 0, moves_4 = moves; _a < moves_4.length; _a++) {\n            var move = moves_4[_a];\n            this.table[move.new.y][move.new.x] = move.cell;\n        }\n    };\n    /**\n     * Method which moves the main pill depending on the {@link input.keysPressed}\n     */\n    Game.prototype.movePill = function () {\n        // to refactor\n        var moves = [];\n        if (_input__WEBPACK_IMPORTED_MODULE_0__.keysPressed.get(\"a\")) {\n            for (var i = 0; i < this.pillPosition.length; i++) {\n                var x = this.pillPosition[i].x;\n                var y = this.pillPosition[i].y;\n                if ((x - 1 > 0 &&\n                    [\"none\", \"movingPill\"].includes(this.table[y][x - 1].cellType)) ||\n                    (x - 1 >= 0 && this.table[y][x - 1].cellType === \"none\")) {\n                    moves.push({\n                        old: { x: x, y: y },\n                        new: { y: y, x: x - 1 },\n                        cell: this.table[y][x],\n                    });\n                }\n            }\n        }\n        if (_input__WEBPACK_IMPORTED_MODULE_0__.keysPressed.get(\"d\")) {\n            for (var i = 0; i < this.pillPosition.length; i++) {\n                var x = this.pillPosition[i].x;\n                var y = this.pillPosition[i].y;\n                if ((x < this.width - 2 &&\n                    [\"none\", \"movingPill\"].includes(this.table[y][x + 1].cellType)) ||\n                    (x < this.width - 1 && this.table[y][x + 1].cellType === \"none\")) {\n                    moves.push({\n                        old: { x: x, y: y },\n                        new: { y: y, x: x + 1 },\n                        cell: this.table[y][x],\n                    });\n                }\n            }\n        }\n        if (_input__WEBPACK_IMPORTED_MODULE_0__.keysPressed.get(\"q\") || _input__WEBPACK_IMPORTED_MODULE_0__.keysPressed.get(\"w\")) {\n            var x = this.pillPosition[0].x;\n            var y = this.pillPosition[0].y;\n            if (this.pillPosition[0].y === this.pillPosition[1].y &&\n                y - 1 > 0 &&\n                this.table[y - 1][x].cellType === \"none\") {\n                this.table[y][x].side = _types__WEBPACK_IMPORTED_MODULE_2__.Side.Bottom;\n                this.table[this.pillPosition[1].y][this.pillPosition[1].x].side =\n                    _types__WEBPACK_IMPORTED_MODULE_2__.Side.Top;\n                moves.push({\n                    old: { x: x, y: y },\n                    new: { y: y, x: x },\n                    cell: this.table[y][x],\n                });\n                moves.push({\n                    old: { x: this.pillPosition[1].x, y: this.pillPosition[1].y },\n                    new: { y: y - 1, x: x },\n                    cell: this.table[this.pillPosition[1].y][this.pillPosition[1].x],\n                });\n            }\n            else if (this.pillPosition[0].x === this.pillPosition[1].x &&\n                x + 1 < this.width &&\n                this.table[y][x + 1].cellType === \"none\") {\n                this.table[this.pillPosition[1].y][this.pillPosition[1].x].side =\n                    _types__WEBPACK_IMPORTED_MODULE_2__.Side.Left;\n                this.table[y][x].side = _types__WEBPACK_IMPORTED_MODULE_2__.Side.Right;\n                moves.push({\n                    old: { x: this.pillPosition[1].x, y: this.pillPosition[1].y },\n                    new: { y: y, x: x },\n                    cell: this.table[this.pillPosition[1].y][this.pillPosition[1].x],\n                });\n                moves.push({\n                    old: { x: x, y: y },\n                    new: { y: y, x: x + 1 },\n                    cell: this.table[y][x],\n                });\n            }\n        }\n        if (_input__WEBPACK_IMPORTED_MODULE_0__.keysPressed.get(\"e\") || _input__WEBPACK_IMPORTED_MODULE_0__.keysPressed.get(\"Shift\")) {\n            var x = this.pillPosition[0].x;\n            var y = this.pillPosition[0].y;\n            if (this.pillPosition[0].y === this.pillPosition[1].y &&\n                y - 1 > 0 &&\n                this.table[y - 1][x].cellType === \"none\") {\n                this.table[y][x].side = _types__WEBPACK_IMPORTED_MODULE_2__.Side.Bottom;\n                this.table[this.pillPosition[1].y][this.pillPosition[1].x].side =\n                    _types__WEBPACK_IMPORTED_MODULE_2__.Side.Top;\n                moves.push({\n                    old: { x: x, y: y },\n                    new: { y: y, x: x },\n                    cell: this.table[y][x],\n                });\n                moves.push({\n                    old: { x: this.pillPosition[1].x, y: this.pillPosition[1].y },\n                    new: { y: y - 1, x: x },\n                    cell: this.table[this.pillPosition[1].y][this.pillPosition[1].x],\n                });\n            }\n            else if (this.pillPosition[0].x === this.pillPosition[1].x &&\n                x - 1 >= 0 &&\n                this.table[y][x - 1].cellType === \"none\") {\n                this.table[this.pillPosition[1].y][this.pillPosition[1].x].side =\n                    _types__WEBPACK_IMPORTED_MODULE_2__.Side.Right;\n                this.table[y][x].side = _types__WEBPACK_IMPORTED_MODULE_2__.Side.Left;\n                moves.push({\n                    old: { x: this.pillPosition[1].x, y: this.pillPosition[1].y },\n                    new: { y: y, x: x },\n                    cell: this.table[this.pillPosition[1].y][this.pillPosition[1].x],\n                });\n                moves.push({\n                    old: { x: x, y: y },\n                    new: { y: y, x: x - 1 },\n                    cell: this.table[y][x],\n                });\n            }\n        }\n        if (moves.length === 2) {\n            this.pillPosition.splice(0, this.pillPosition.length);\n            // clear old moving pills\n            for (var _i = 0, moves_5 = moves; _i < moves_5.length; _i++) {\n                var move = moves_5[_i];\n                this.table[move.old.y][move.old.x] = this.emptyCell();\n            }\n            // draw new moving pills\n            for (var _a = 0, moves_6 = moves; _a < moves_6.length; _a++) {\n                var move = moves_6[_a];\n                this.table[move.new.y][move.new.x] = move.cell;\n                this.pillPosition.push({ x: move.new.x, y: move.new.y });\n            }\n        }\n    };\n    /**\n     * Method which checks for maching rows or columns\n     *\n     * @todo fix when more than 2 microbes in one line\n     *   -> now we are just removing the ability to spawn multiple microbes in one\n     *   line inside {@link Game.randomMicrobes} method\n     */\n    Game.prototype.checkForMaches = function () {\n        var counter;\n        var wrongColor;\n        var currentColor;\n        for (var y = this.height - 1; y >= 0; y--) {\n            var cellsInRow = this.table[y];\n            counter = 0;\n            currentColor = \"\";\n            wrongColor = false;\n            var microbe = 0;\n            for (var i = 0; i < cellsInRow.length; i++) {\n                var cell = cellsInRow[i];\n                wrongColor = true;\n                if (cell.cellType === \"microbe\")\n                    ++microbe;\n                if ([\"pill\", \"microbe\"].includes(cell.cellType)) {\n                    if (currentColor === cell.color) {\n                        wrongColor = false;\n                        counter++;\n                        if (i < cellsInRow.length - 1)\n                            continue;\n                    }\n                    currentColor = cell.color;\n                }\n                else {\n                    currentColor = \"\";\n                }\n                if (counter >= 3) {\n                    if (wrongColor) {\n                        microbe ? (this.score += microbe * 100) : (this.score -= 0);\n                        this.microbesNr -= microbe;\n                        // console.log(\"wrongX\", this.score);\n                        for (var x = i - 1; x >= i - 1 - counter; x--) {\n                            this.ui.destroyPill(this.table[y][x].color, y, x);\n                            this.table[y][x] = this.emptyCell();\n                        }\n                    }\n                    else if (i === cellsInRow.length - 1) {\n                        microbe ? (this.score += microbe * 100) : (this.score -= 0);\n                        this.microbesNr -= microbe;\n                        // console.log(\"lastX\", this.score);\n                        for (var x = i; x >= i - counter; x--) {\n                            this.ui.destroyPill(this.table[y][x].color, y, x);\n                            this.table[y][x] = this.emptyCell();\n                        }\n                    }\n                }\n                counter = 0;\n            }\n        }\n        for (var x = 0; x < this.width; x++) {\n            counter = 0;\n            currentColor = \"\";\n            var microbe = 0;\n            for (var i = this.height - 1; i >= 0; i--) {\n                var cell = this.table[i][x];\n                wrongColor = true;\n                if (cell.cellType === \"microbe\")\n                    ++microbe;\n                if ([\"pill\", \"microbe\"].includes(cell.cellType)) {\n                    if (currentColor === cell.color) {\n                        wrongColor = false;\n                        counter++;\n                        if (i > 0)\n                            continue;\n                    }\n                    currentColor = cell.color;\n                }\n                else {\n                    currentColor = \"\";\n                }\n                if (counter >= 3) {\n                    if (wrongColor) {\n                        microbe ? (this.score += microbe * 100) : (this.score -= 0);\n                        this.microbesNr -= microbe;\n                        // console.log(\"wrongY\", counter, this.score);\n                        for (var y = i + 1; y <= i + 1 + counter; y++) {\n                            this.ui.destroyPill(this.table[y][x].color, y, x);\n                            this.table[y][x] = this.emptyCell();\n                        }\n                    }\n                    else if (i === 0 && counter >= 3) {\n                        microbe ? (this.score += microbe * 100) : (this.score -= 0);\n                        this.microbesNr -= microbe;\n                        // console.log(\"y0\", this.score);\n                        for (var y = 0; y <= counter; y++) {\n                            this.ui.destroyPill(this.table[y][x].color, y, x);\n                            this.table[y][x] = this.emptyCell();\n                        }\n                    }\n                }\n                counter = 0;\n            }\n            this.ui.setScore(this.score);\n            this.ui.setMicrobesLeft(this.microbesNr);\n        }\n    };\n    /**\n     * Method which checks if the game should end\n     */\n    Game.prototype.checkEndTheGame = function () {\n        if (!(this.pillPosition && this.lastPillPosition))\n            return;\n        if (this.microbesNr === 0) {\n            if (this.score > this.bestScore) {\n                this.bestScore = this.score;\n                (0,_storage__WEBPACK_IMPORTED_MODULE_3__.setBestScore)(this.score);\n            }\n            cancelAnimationFrame(this.animationFrame);\n            this.ui.stageCleared();\n        }\n    };\n    return Game;\n}());\n\n\n\n//# sourceURL=webpack://dr-mario/./src/game.ts?");

/***/ }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _game__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./game */ \"./src/game.ts\");\n/* harmony import */ var _input__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./input */ \"./src/input.ts\");\n/**\n * Everything starts here\n */\n\n\n(0,_input__WEBPACK_IMPORTED_MODULE_1__.startListening)();\nnew _game__WEBPACK_IMPORTED_MODULE_0__.Game();\n\n\n//# sourceURL=webpack://dr-mario/./src/index.ts?");

/***/ }),

/***/ "./src/input.ts":
/*!**********************!*\
  !*** ./src/input.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"keysPressed\": () => (/* binding */ keysPressed),\n/* harmony export */   \"startListening\": () => (/* binding */ startListening)\n/* harmony export */ });\n/**\n * Module which containes all things related to capturing user input\n * @module input\n */\n/**\n * Map which containes states for keys.\n */\nvar keysPressed = new Map();\n/**\n * Function which starts listening for user input and captures it to the\n * {@link input.keysPressed} variable.\n */\nfunction startListening() {\n    document.addEventListener('keydown', function (e) {\n        keysPressed.set(e.key, true);\n    });\n    document.addEventListener('keyup', function (e) {\n        keysPressed.set(e.key, false);\n    });\n}\n\n\n//# sourceURL=webpack://dr-mario/./src/input.ts?");

/***/ }),

/***/ "./src/storage.ts":
/*!************************!*\
  !*** ./src/storage.ts ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getBestScore\": () => (/* binding */ getBestScore),\n/* harmony export */   \"setBestScore\": () => (/* binding */ setBestScore)\n/* harmony export */ });\n/**\n * Module which containes storage related functions\n * @module storage\n */\n/**\n * Function which stores top score in local storage\n * @param score\n */\nfunction setBestScore(score) {\n    localStorage.setItem('bestScore', JSON.stringify(score));\n}\n/**\n * Function that gets score from the local storage or returns 0\n * @returns score or 0\n */\nfunction getBestScore() {\n    var score = JSON.parse(localStorage.getItem('bestScore')) | 0;\n    return score;\n}\n\n\n//# sourceURL=webpack://dr-mario/./src/storage.ts?");

/***/ }),

/***/ "./src/types.ts":
/*!**********************!*\
  !*** ./src/types.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Side\": () => (/* binding */ Side)\n/* harmony export */ });\n/**\n * Module with most of the types, interfaces and enums in this project\n * @module types\n */\nvar Side;\n(function (Side) {\n    Side[Side[\"All\"] = 0] = \"All\";\n    Side[Side[\"Top\"] = 1] = \"Top\";\n    Side[Side[\"Bottom\"] = 2] = \"Bottom\";\n    Side[Side[\"Left\"] = 3] = \"Left\";\n    Side[Side[\"Right\"] = 4] = \"Right\";\n})(Side || (Side = {}));\n\n\n//# sourceURL=webpack://dr-mario/./src/types.ts?");

/***/ }),

/***/ "./src/ui.ts":
/*!*******************!*\
  !*** ./src/ui.ts ***!
  \*******************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Board\": () => (/* binding */ Board)\n/* harmony export */ });\n/* harmony import */ var _animations_throwAnimation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./animations/throwAnimation */ \"./src/animations/throwAnimation.ts\");\n/* harmony import */ var _animations_lensAnimation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./animations/lensAnimation */ \"./src/animations/lensAnimation.ts\");\n/**\n * Module which is used to present the game to the user\n * @module ui\n */\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (undefined && undefined.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __spreadArray = (undefined && undefined.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\n\n\n/**\n * Class which draws the state of the game on the canvas\n * @beta\n */\nvar Board = /** @class */ (function () {\n    function Board(width, height) {\n        var _a;\n        this.canvW = 640;\n        this.canvH = 384;\n        this.currentFrame = 0;\n        this.topScore = 0;\n        this.score = 0;\n        this.sizeUnit = 16;\n        this.microbesLeft = 4;\n        this.throwAnimationTime = 0;\n        this.toDestroy = [];\n        this.toDraw = (0,_animations_lensAnimation__WEBPACK_IMPORTED_MODULE_1__[\"default\"])();\n        /**\n         * Variable which is used to check if all assets are loaded\n         */\n        this.ok = false;\n        this.width = width;\n        this.height = height;\n        var htmlBase = (_a = document.getElementById(\"game\")) !== null && _a !== void 0 ? _a : document.body;\n        htmlBase.innerHTML = \"\";\n        var canvasEl = document.createElement(\"canvas\");\n        canvasEl.width = this.canvW;\n        canvasEl.height = this.canvH;\n        canvasEl.id = \"board\";\n        this.ctx = canvasEl.getContext(\"2d\");\n        this.loadJson();\n        this.loadSprites();\n        htmlBase.append(canvasEl);\n    }\n    /**\n     * Method used to load spritesheet which containes all sprites (images) used\n     * in game.\n     */\n    Board.prototype.loadSprites = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        this.spritesheet = new Image();\n                        this.spritesheet.src = \"./res/sprites.png\";\n                        return [4 /*yield*/, this.spritesheet.decode()];\n                    case 1:\n                        _a.sent();\n                        this.ok = true;\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Method used to load json file with locations of each sprite in spritesheet\n     * to {@link ui.Board.json} property\n     */\n    Board.prototype.loadJson = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _a;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        _a = this;\n                        return [4 /*yield*/, fetch(\"./res/animations.json\").then(function (res) { return res.json(); })];\n                    case 1:\n                        _a.json = _b.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Method that is used to prepare next pill for animation\n     * @param colors colors of the next pill\n     */\n    Board.prototype.preparePill = function (colors) {\n        this.nextColors = colors;\n    };\n    /**\n     * Method that animates the doctor throwing the pill to the bottle\n     * @returns true when animation has ended\n     */\n    Board.prototype.animateThrow = function () {\n        var throwAnimationLength = 24;\n        if (this.throwAnimationTime === throwAnimationLength) {\n            this.throwAnimationTime = 0;\n            return true;\n        }\n        for (var _i = 0, _a = (0,_animations_throwAnimation__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this.nextColors)[this.throwAnimationTime]; _i < _a.length; _i++) {\n            var el = _a[_i];\n            this.drawFrame(el.spriteName, el.pos.x, el.pos.y);\n        }\n        this.throwAnimationTime++;\n        return false;\n    };\n    /**\n     * Method that is used to set the top score\n     * @param score top score\n     */\n    Board.prototype.setTopScore = function (score) {\n        this.topScore = score;\n    };\n    /**\n     * Method that is used to set current score\n     * @param score current score\n     */\n    Board.prototype.setScore = function (score) {\n        this.score = score;\n    };\n    /**\n     * Method that is used to set how many microbes are left\n     * @param ammount number of microbes left\n     */\n    Board.prototype.setMicrobesLeft = function (ammount) {\n        this.microbesLeft = ammount;\n    };\n    /**\n     * Method that gets the position and size of the sprite from the\n     * {@link ui.Board.json} depending on the current frame.\n     * @param name name of the sprite\n     * @returns position and size of the sprite\n     */\n    Board.prototype.getFrame = function (name) {\n        if (!this.json)\n            return [0, 0, 0, 0];\n        var frame = this.currentFrame % this.json.sprites[name].framesNr;\n        return Object.values(this.json.sprites[name].frames[frame]);\n    };\n    /**\n     * Method which returns the size of the sprite from the {@link ui.Board.json}\n     * @param name name of the sprite\n     * @returns width and height of the sprite\n     */\n    Board.prototype.getSize = function (name) {\n        if (!this.json)\n            return [0, 0];\n        return [this.json.sprites[name].size.w, this.json.sprites[name].size.h];\n    };\n    /**\n     * Method that draws a sprite on the canvas\n     * @param name sprite name\n     * @param x x position\n     * @param y y position\n     */\n    Board.prototype.drawFrame = function (name, x, y) {\n        var _a;\n        (_a = this.ctx).drawImage.apply(_a, __spreadArray(__spreadArray(__spreadArray([this.spritesheet], this.getFrame(name), false), [x,\n            y], false), this.getSize(name), false));\n    };\n    /**\n     * Method that draws text (numbers) on the canvas\n     * @param text text to draw\n     * @param size length of text\n     * @param leftMargin x position\n     * @param topMargin y position\n     */\n    Board.prototype.drawText = function (text, size, leftMargin, topMargin) {\n        var _a;\n        var s;\n        var charArr;\n        s = text.toString().split(\"\");\n        charArr = new Array(size);\n        for (var i = 0; i < s.length; i++)\n            charArr[size - s.length + i] = s[i];\n        charArr.fill(\"0\", 0, size - s.length);\n        for (var i = 0; i < size; i++) {\n            (_a = this.ctx).drawImage.apply(_a, __spreadArray(__spreadArray(__spreadArray([this.spritesheet], this.getFrame(charArr[i]), false), [(leftMargin + i) * this.sizeUnit,\n                topMargin * this.sizeUnit], false), this.getSize(charArr[i]), false));\n        }\n    };\n    /**\n     * Method that displays game over popup and changes doctors sprite\n     */\n    Board.prototype.gameOver = function () {\n        var _a = this.getSize(\"pop_gameOver\"), x = _a[0], y = _a[1];\n        var dispX = (this.canvW - x) / 2;\n        var dispY = (this.canvH - y) / 2;\n        this.drawFrame(\"pop_gameOver\", dispX, dispY);\n        this.drawFrame(\"dr_gameOver\", 480, 48);\n    };\n    /**\n     * Method that displays stage cleared popup\n     */\n    Board.prototype.stageCleared = function () {\n        var _a = this.getSize(\"pop_stageCleared\"), x = _a[0], y = _a[1];\n        var dispX = (this.canvW - x) / 2;\n        var dispY = (this.canvH - y) / 2;\n        this.drawFrame(\"pop_stageCleared\", dispX, dispY);\n    };\n    /**\n     * Method that draws a given cell on a given position\n     * @param cellData\n     * @param y y position\n     * @param x x position\n     */\n    Board.prototype.drawCell = function (cellData, y, x) {\n        var dispX = (17 + x) * this.sizeUnit;\n        var dispY = (6 + y) * this.sizeUnit;\n        switch (cellData.cellType) {\n            case \"movingPill\":\n            case \"pill\":\n                // cellData.\n                this.drawFrame(\"pill_\".concat(cellData.color, \"_\").concat(cellData.side), dispX, dispY);\n                break;\n            case \"microbe\":\n                this.drawFrame(\"microbe_\".concat(cellData.color), dispX, dispY);\n                break;\n        }\n    };\n    /**\n     * Method which draws a destroyed cell sprite\n     * @param color cells color\n     * @param y y position\n     * @param x x position\n     */\n    Board.prototype.destroyPill = function (color, y, x) {\n        var dispX = (17 + x) * this.sizeUnit;\n        var dispY = (6 + y) * this.sizeUnit;\n        // temporary fix\n        if (color === undefined)\n            return;\n        this.toDestroy.push({ sprite: \"pill_\".concat(color, \"_pop\"), x: dispX, y: dispY });\n    };\n    /**\n     * Method that is used to draw the whole game board.\n     * @param gameBoard\n     */\n    Board.prototype.drawBoard = function (gameBoard) {\n        this.currentFrame++;\n        // drawBackground\n        this.drawFrame(\"bg\", 0, 0);\n        if (this.toDestroy.length != 0) {\n            for (var _i = 0, _a = this.toDestroy; _i < _a.length; _i++) {\n                var el = _a[_i];\n                this.drawFrame(el.sprite, el.x, el.y);\n            }\n            this.toDestroy = [];\n        }\n        for (var y = 0; y < this.height; y++) {\n            for (var x = 0; x < this.width; x++) {\n                this.drawCell(gameBoard[y][x], y, x);\n            }\n        }\n        if (this.currentFrame % 5 === 0)\n            this.toDraw = (0,_animations_lensAnimation__WEBPACK_IMPORTED_MODULE_1__[\"default\"])();\n        for (var _b = 0, _c = this.toDraw; _b < _c.length; _b++) {\n            var el = _c[_b];\n            this.drawFrame(el.spriteName, el.pos.x, el.pos.y);\n        }\n        this.drawText(this.topScore, 7, 5, 5);\n        this.drawText(this.score, 7, 5, 8);\n        this.drawText(this.microbesLeft, 2, 35, 21);\n        // this.drawFrame(\"hand_down_p1\", 496, 96)\n        // this.drawFrame(\"hand_down_p2\", 496, 112)\n        // this.drawFrame(\"hand_middle_p1\", 480, 80)\n        // this.drawFrame(\"hand_middle_p2\", 496, 80)\n        // this.drawFrame(\"hand_middle_p3\", 480, 96)\n        // this.drawFrame(\"hand_middle_p4\", 496, 96)\n        if (this.throwAnimationTime === 0) {\n            this.drawFrame(\"hand_up_p1\", 496, 64);\n            this.drawFrame(\"hand_up_p2\", 496, 80);\n            this.drawFrame(\"hand_up_p3\", 496, 96);\n            this.drawFrame(\"pill_\".concat(this.nextColors[0], \"_3\"), 480, 48);\n            this.drawFrame(\"pill_\".concat(this.nextColors[1], \"_4\"), 496, 48);\n        }\n    };\n    return Board;\n}());\n\n\n\n//# sourceURL=webpack://dr-mario/./src/ui.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.ts");
/******/ 	
/******/ })()
;